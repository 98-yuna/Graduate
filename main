<main>

modulationTypes = categorical(["BPSK", "QPSK", "8PSK","16QAM", "64QAM"]); 
 
numFramesPerModType = 2000;

sampleperSymbol = 8; 
sampleperFrame = 1024;  

fs = 200e3; 
fc = 2.4e9; 

reyleighchan = comm.RayleighChannel('SampleRate', fs, 'PathDelays',[0 1.5e-4], ...
    'AveragePathGains',[2 3],'MaximumDopplerShift',4 );

predictDir = fullfile(tempdir,"ModulationFiles");
fileNameRoot = "signal";
numModulationTypes = length(modulationTypes); 
signalFilesExist = false; 

if exist(predictDir,'dir')
  files = ls(fullfile(predictDir,sprintf("%s*",fileNameRoot)));
  if length(files) == numModulationTypes*numFramesPerModType
      signalFilesExist = true;
  end
end

tic
if ~signalFilesExist
    [success, msg, msgID] =  mkdir(predictDir);
    if ~success
        error(msgID,msg)
    end
  for modType = 1: numModulationTypes
      fprintf('%s 입력파일생성중 %s frames\n',datestr(toc/86400,'HH:MM:SS'), modulationTypes(modType))
      label = modulationTypes(modType);
      data_rand = create_rand(modulationTypes(modType));
      for p=1:numFramesPerModType
      x = data_rand();
      layer = modulate(modulationTypes(modType), data_rand);
      channel_pass = reyleighchan(layer);
      N = normalize(channel_pass,'zscore', 'std');
      
      fileName = fullfile(predictDir,sprintf("%s%s%d",fileNameRoot,modulationTypes(modType),p));
      save(fileName,"N","label");
     end  
  end
else
  disp("메모리에 저장되어 있는 데이터파일이 존재합니다.")
  disp("메모리에 저장되어있는 신호파일을 불러옵니다.")
end

graph_figure(predictDir,modulationTypes);

datastore1 = signalDatastore("C:\Users\user\AppData\Local\Temp\ModulationFiles",'SignalVariableNames',["label","N"])

input_signal = transform(datastore1,@ input_trans);

percentTrainingSamples = 80;
percentTestSamples = 20;
total_labels=gather(tall(transform(input_signal, @import_label)));

numFrames = length(total_labels); % numFrames = 10000
numTrainFrames = (numFrames*percentTrainingSamples)/100; % numTrainFrames = 8000
numTestFrames = (numFrames*percentTestSamples)/100; % numTestFrames = 2000

trainIdx = zeros(numTrainFrames,1);
testIdx = zeros(numTestFrames,1);

trainFrameCnt = 0;
testFrameCnt = 0;

for modType = 1:numModulationTypes 
  modLabel = find(string(total_Labels) == string(modulationTypes(modType)));
  numFrames = length(modLabel);  % 변조 신호 각각 갯수 반환
  numModTrainFrames = numFrames*percentTrainingSamples/100; 
  numModTestFrames = numFrames*percentTestSamples/100; 
  
  trainSet((1:numModTrainFrames)+trainFrameCnt,1) = modLabel(1:numModTrainFrames,1); 
  trainFrameCnt = trainFrameCnt + numModTrainFrames; 
  
  testSet((1:numModTestFrames)+testFrameCnt,1) = modLabel(1:numModTestFrames,1);
  testFrameCnt = testFrameCnt + numModTestFrames; 
end

test_label= gather(tall(transform(test_signal, @import_label)));
test_frame = gather(tall(transform(test_signal, @import_frame)));
testsignal = cat(4, test_frame{:}); 
testlabel = categorical(string(test_label));


input_label = gather(tall(transform(input_signal, @import_label)));
input_frame = gather(tall(transform(input_signal, @import_frame)));
inputsignal = cat(4, input_frame{:}); 
inputlabel = categorical(string(input_label));
size(inputsignal)

filterSize = [1 4];
poolSize = [1 4];
dropoutRate = 0.5;

layers = [ 
    imageInputLayer([1 1024 2], 'Normalization', 'none', 'Name', 'Input Layer')
    convolution2dLayer([1 4], 5, 'Padding', 'same', 'Name', 'CNN1')
    batchNormalizationLayer('Name', 'BN1')
    reluLayer('Name', 'ReLU1')
    maxPooling2dLayer(poolSize, 'Stride', [1 4], 'Name', 'MaxPool1')
    
    convolution2dLayer(filterSize, 10, 'Padding', 'same', 'Name', 'CNN2')
    batchNormalizationLayer('Name', 'BN2')
    reluLayer('Name', 'ReLU2')
    maxPooling2dLayer(poolSize, 'Stride', [1 4], 'Name', 'MaxPool2')
  
    
    convolution2dLayer(filterSize, 20, 'Padding', 'same', 'Name', 'CNN3')
    batchNormalizationLayer('Name', 'BN3')
    reluLayer('Name', 'ReLU3')
    maxPooling2dLayer(poolSize, 'Stride', [1 4], 'Name', 'MaxPool3')
    
      
    convolution2dLayer(filterSize, 40, 'Padding', 'same', 'Name', 'CNN4')
    batchNormalizationLayer('Name', 'BN4')
    reluLayer('Name', 'ReLU4')
    maxPooling2dLayer(poolSize, 'Stride', [1 4], 'Name', 'MaxPool4')

    fullyConnectedLayer(numModulationTypes, 'Name', 'FC1')
    softmaxLayer('Name', 'SoftMax')
    classificationLayer('Name', 'Output') ];

analyzeNetwork(layers);

options = trainingOptions('sgdm','MaxEpochs',15, 'MiniBatchSize', 128, ...
    'InitialLearnRate', 0.0001 ,'Plots','training-progress')

net = trainNetwork(inputsignal,inputlabel,layers, options)

Pred=classify(net,inputsignal); 
Accuracy=mean(Pred == inputlabel);
disp("Train accuracy: " + Accuracy*100 + "%")

Pred2=predict(net, testsignal, 'ReturnCategorical',true);
Accuracy2=mean(Pred2 == testlabel);
disp("Test accuracy: " + Accuracy2*100 + "%")


figure
cm= confusionchart(testlabel, Pred2);
cm.Title= '테스트 데이터의 혼동 행렬 표';
cm.RowSummary = 'row-normalized';
cm.Parent.Position = [cm.Parent.Position(1:2) 740 424];




